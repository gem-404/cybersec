
"""
A program that reads a playfair encrypted cipher_text
and a key and decrypts the cipher_text.
"""


def matrix(rows: int, cols: int, initial: int) -> list[list[int]]:
    """ Generate a matrix with the x and y parameters
    as the no. of rows and columns of the matrix generated
    initialized with the int initial.

    """

    return [[initial for _ in range(rows)] for _ in range(cols)]


def key_in_mat(first: int, second: int, key: str) -> list[list[int]]:
    """ Fills in the matrix generated by the matrix function
    above with the appropriate character value indices.

    """

    key_into_matrix: list = []

    for char in key:
        if char not in key_into_matrix:
            if char == 'J':
                key_into_matrix.append('I')
            else:
                key_into_matrix.append(char)

    # this fills in the rest of the matrix with the remaining unused letters
    # from the english alphabet

    for i in range(65, 91):
        if chr(i) not in key_into_matrix:

            if i == 73 and chr(74) not in key_into_matrix:
                key_into_matrix.append("I")

                first = 1

            elif first == 0 and i == 73 or i == 74:
                pass

            else:
                key_into_matrix.append(chr(i))

    # defining the cipher matrix as a 5x5 matrix with an inital of 0

    cipher_matrix: list[list[int]] = matrix(5, 5, 0)

    for i in range(0, 5):
        for j in range(0, 5):
            cipher_matrix[i][j] = key_into_matrix[second]

            second += 1

    return cipher_matrix


def index_locator(cipher_matrix: list[list[int]], char: str) -> list[int]:
    """Replaces every instance of the character J with
    an I according to the rules of the playfair cypher
    encryption. It also adds the rest of the letters indices
    to alist and returns the list...

    """
    lst: list = []

    if char == 'J':
        char = 'I'

    for i, j in enumerate(cipher_matrix):

        for key, value in enumerate(j):
            if char == value:
                lst.append(i)
                lst.append(key)

    return lst


def decryption(ciphermatrix: list[list[int]], text: str) -> None:
    """
    This function decrypts the cipher text using the
    key and the cipher matrix generated by the key_in_mat
    function.
    """
    integer: int = 0
    for value in range(0, len(text)+1, 2):

        if value < len(text)-1:
            if text[value] == text[value+1]:
                text = text[:value+1]+'X'+text[value+1:]

    if len(text) % 2 != 0:

        text = text[:]+'X'

    word: str = ""

    while integer < len(text):
        lst = []
        lst = index_locator(ciphermatrix, text[integer])
        lon = []
        lon = index_locator(ciphermatrix, text[integer+1])

        if lst[1] == lon[1]:
            word += f"{ciphermatrix[(lst[0] - 1) %5][lst[1]]}\
                  {ciphermatrix[(lon[0] - 1) %5][lon[1]]}"

        elif lst[0] == lon[0]:
            word += f"{ciphermatrix[lst[0]][(lst[1] - 1) % 5]}\
                  {ciphermatrix[lon[0]][(lon[1] - 1) % 5]}"

        else:
            word += f"{ciphermatrix[lst[0]][lon[1]]}\
                  {ciphermatrix[lon[0]][lst[1]]}"

        integer += 2

    word: str = "".join(char for char in word
                        if not char.isspace())

    print(word)


def main():
    """Main function"""

    first: int = 0
    second: int = 0

    while True:
        key: str = input("Enter key: ")
        key: str = key.replace(" ", "")
        key: str = key.upper()

        if key == "":
            break

        ciphertext: str = input("Cipher text: ")
        ciphertext: str = ciphertext.replace(" ", "")
        ciphertext: str = ciphertext.upper()

        if ciphertext == "":
            break

        ciphermatrix = key_in_mat(first, second, key)
        decryption(ciphermatrix, ciphertext)


if __name__ == '__main__':
    main()
